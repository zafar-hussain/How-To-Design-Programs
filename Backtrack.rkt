#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 35 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 18 #"java-comment-box%\0"
1 0 23 #"java-interactions-box%\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 87 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 9 #"Consolas\0"
0 15 90 -1 90 -1 1 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
41 #"profj:syntax-colors:scheme:block-comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 139 0 0 0 -1 -1 2 37
#"profj:syntax-colors:scheme:prim-type\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 139 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"profj:syntax-colors:scheme:identifier\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 34
#"profj:syntax-colors:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:literal\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 33
#"profj:syntax-colors:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:default\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 37
#"profj:syntax-colors:scheme:uncovered\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:covered\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 139 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 9 #"Consolas\0"
0.0 15 90 -1 90 -1 1 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 21 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1           0 763 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 179
(
 #"#reader(lib \"htdp-advanced-reader.ss\" \"lang\")((modname Backtrack"
 #") (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t const"
 #"ructor repeating-decimal #t #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"Graph"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"B"
0 0 24 3 2 #" ("
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 1 #"F"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"C"
0 0 24 3 2 #" ("
0 0 14 3 1 #"D"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"D"
0 0 24 3 4 #" ())"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"E"
0 0 24 3 2 #" ("
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 14 3 1 #"F"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"F"
0 0 24 3 2 #" ("
0 0 14 3 1 #"D"
0 0 24 3 1 #" "
0 0 14 3 1 #"G"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"G"
0 0 24 3 6 #" ())))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #";Exercise 28.1.1 Translate the above definition into proper list for"
 #"m using list and proper"
) 0 0 24 29 1 #"\n"
0 0 17 3 8 #";symbols"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 5 #"Graph"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"E"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"B"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"F"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"C"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"D"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"D"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"E"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"F"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"F"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"D"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"G"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"G"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 17 3 101
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 88
(
 #";Exercise 28.1.2 Develop the function neighbors. It consumes a node "
 #"n and a graph g (see"
) 0 0 24 29 1 #"\n"
0 0 17 3 63
#";exercise 28.1.1) and produces the list of neighbors of n in g."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; neighbors: node graph -> [listOf nodes]"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; returns a list Of neighbors of node n in graph g"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";(define (neighbors n g) '())           ; stub"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"neighbors"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"D"
0 0 24 3 1 #" "
0 0 14 3 5 #"Graph"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 6 #"())   "
0 0 17 3 10 #"; basecase"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"neighbors"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 5 #"Graph"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"E"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"neighbors"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 5 #"Graph"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"F"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; template to use : atomic + self recursive "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"neighbors"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 6 #"second"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #")) "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"second"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"neighbors"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; find-route: node node graph -> [listOf nodes] or #f"
0 0 24 29 1 #"\n"
0 0 17 3 94
(
 #";; returns a list of nodes detailing a path from the given origin no"
 #"de to the destination node"
) 0 0 24 29 1 #"\n"
0 0 17 3 33 #";; - or false if no path is found"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";(define (find-route start end g) #f)      ; stub"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"find-route"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 5 #"Graph"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"A"
0 0 24 3 4 #"))  "
0 0 17 3 23 #"; terminating condition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"find-route"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 5 #"Graph"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"find-route"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 5 #"Graph"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"find-route"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"F"
0 0 24 3 1 #" "
0 0 14 3 5 #"Graph"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 1 #"F"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"find-route"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"G"
0 0 24 3 1 #" "
0 0 14 3 5 #"Graph"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 2          23 21 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           6 500
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\1v\0\0\0\240\b"
 #"\6\0\0\0\30NG\343\0\0\n2IDATx\234\355\335\333r\335\266\22"
 #"E\321f\312\377\377\313\314\203\303\230\242"
 #"yA\223\r\240/sT\271\352\304>Q\266\300\325\213 \264e-\353\272\nl"
 #",\313\362\270\230\353\272.#^\vby\312\16\271\251M\333-\v\305no\273"
 #"\b?\26zwa\30R\354]e\203\314\340\350\254[\366\277\277\375\331?\243_"
 #"XU\f&\316\334\2257\231A\253cV(v\300\201\253\22\247\334\241\265,\313"
 #"\372k\366\213\310\254\345\\\fxB\271"
 #"C\213b\357\350\352\274\24\0z\342(f\20J\36o\221\27hQ\354\200\3\224"
 #"7\254\360\256\30`\262\247\363\363eY"
 #"V\316\330\361\344\2701\340}\354\206Z"
 #"w]\f*\216\356\262C^\240\355\26\212\35\0\222\341(\6\0\222\241\330\1 "
 #"\31\212\335\310\262,+\357l@+\362\202Vo\262\302\31\373GW\v\316\27\274"
 #"p\206\274\240\325\227\254\260c\357\204\335"
 #"\0304\310Km\232\353\337\362\377\345\257"
 #"\24\370\200a\204\306S^\310Sm\226\327\237b\a\234\3408\246.\353\233:G"
 #"1\0370\210\320 /\270\263\256\353\262"
 #"\377\365\345cQ\354\2350\304\320 /\265i\256?_<\35\340l\221\31R\\"
 #"!/h\365%+\274\335\361\245\263\277"
 #"\234\251\365\367P\179@+\213\254\360\305S\2057_\340X\327ua\250k\342"
 #"].h\305\27O\235\320\236\2111\344\265qcG+\213\254P\354\203P\356\265"
 #"p\2551\23G1\215\266A\375r7\345X\246\206}\251s\255\361\304\242[\216"
 #"\330\2617\260\\xv\356\271\355\263B"
 #"\251\343I\217R\27a\307\376\250\307\16\233\235{N\275\206\249\365"
 #"\354\0v\3547z\356\254\331\271\347\302\265\204F\357\274P\354\27F"
) 500
(
 #"\354\276(\367\348~\201\306\210n\341"
 #"(\346\304\310c\22\216eb\343\370\5"
 #"\32\243f\235\35\373\301\214\222e\347\36"
 #"\323\226\25J\35-Fv\v\305\2763s\347L\271\307\302S\0264F\347\205b"
 #"\377\217\207R\245\334c\340\32AcF^8c\27_\273/\316\334}\343\332@"
 #"cV^\312\357\330=\16*;w\237<f\5~\315\314K\351b\367\\\236\224"
 #"\273/\\\vh\314\316K\331\243\230\b\273/\216e|\340\32@\303C^J\356"
 #"\330=,|+v\356sE\312\n\346\363\222\227r\305\36\261$)\3679Xs"
 #"hx\312K\251\243\30/w\32378"
 #"\226\31\213\265\206\206\267\274\224\331\261{"
 #"[\3707\330\271\217\221!+\30\307c^J\24\273\307\205\177\213r\357+SV"
 #"\320\237\327\274\244/\366\214%H\271\367"
 #"\301\232B\303s^R\237\261{\275\233Z\340\314\335\26k\t\r\357yI\273c"
 #"\367\276\360\26\330\271\333\250\220\25\330\211"
 #"\220\227\224\305^\251\354(\367oX;hD\311K\272\243\230\bwSk\34\313"
 #"\274\303\232A#R^R\355\330#-\2745v\356:\225\263\2\275hyIS"
 #"\354\224\32\345\336\2125\202F\304\274\244"
 #"8\212\211v7\355\211c\231{\254\r"
 #"4\242\346%\374\216=\352\302\367\304\316"
 #"\375\34Y\201F\344\274\204.\366\310\v"
 #"\337\e\345\376\23Y\201F\364\274\204-vJ\353\31\345\376\ek\0\215\fy\t"
 #"y\306\36\375n:R\3653\367\312\237"
 #";\364\262\344%\334\216=\313\302\217Tu\347NV\240\221)/\241\212\275b9"
 #"Y\251V\356\225>W|\227-/a\216b2\335Mg\251r,S\341s\204"
 #"\235\214y\t\261c\317\270\360\263d\337"
 #"\271\223\25hd\315\213\373b\317\\B\263d-\367\214\237\23\372\311\234"
 #"\27\327G1Y\357\246\36d;\226\311\364\271\240\277\354yq\273c\317"
) 500
(
 #"\276\360\260CV\240Q!/.\213\275\302\302{\220\341H\206\254@\243J^\334"
 #"\25{\364\242\211&r\271G}\335\230"
 #"\243R^\\\235\261W\271\233z\23\361"
 #"\274=\332\353\305\\\325\362\342f\307^"
 #"m\341\275\211\264s'+\320\250\230\27"
 #"\27\305\36\245P\262\213P\356\336_\37"
 #"|\251\232\227\351G1\25\357\246\236y"
 #">\226\361\372\272\340S\345\274L\335\261"
 #"W^x\317<\356\334\311\n4\252\347"
 #"eZ\261{+\16\374\344\251\334\275\274"
 #"\16\304@^&\35\305T\277\233F\341"
 #"\341Xf\366\177\37\261\220\227\337\206\357"
 #"\330Y\370Xf\356\334\311\n4\310\313"
 #"\37C\213\235\205\217iF\271\223\25h"
 #"\220\227\237\206\25;\347^\261\215,w"
 #"\262\2\r\362\362\267!g\354\334Ms\30q\346NV\240A^\316u\337\261\263"
 #"\360\271\364\334\271\223\25h\220\227k\247"
 #"\305\276,\313j1\274<\"\345\324\243\334\311\n4\310\313\275nG1\334Ms"
 #"\263<\226!+\320 /\317\376\332\261\357\357\204o\357\212,|\r\26;w\262"
 #"\2\r\362\322\346\364(\346\313\302\361\210"
 #"T\313\227r'+\320 /\355~\34\305\234-\234\346\16\311\335\264\2467\3072"
 #"d\5\32\344E\307\354]1,|m\232\235;Y\201\6y\321\273|W\314\335"
 #"\277t\366\256\31\26\36-\345\316\220B"
 #"\203\274\274\363\177\261o\3\271\256\353\262"
 #"\375:\376\331\261\320\255\336\26\211<\356"
 #"\312\235\254@\203\274\274\367c\307~\2743j\316\326-_\24b;+\367m\347"
 #"\305\356\v-\310\3137\377\354w\335g"
 #"\303x\366\277\201'\373r\347q\32\32"
 #"\344\345\273_w\vxv\34\3\264\362"
 #"\364\303:\20\3y\261\321\374\256\30\356"
 #"\240\320b\347\5\r\216_\354\230\274\335"
 #"\221\v\201\243}\251\263s\307\0236\1\266T\305~\266\360"
 #"\\\f\34\235\2258\345\216+\344\302\236\372/\1\243\310q\347"
) 500
(
 #"n\347\345\341g\250\302\27\362\320\207\351"
 #"w\236Z},\304\3242\244\354\334\261"
 #"\241\324\3731+v\6\2666\315\220\222"
 #"\25P\352}\231\376\4%\6\266\2467"
 #"\327\234\254\324\305u\357\317\374G\3431"
 #"\260\265|y\213\32Y\251\207\2674\216\321\345g\2362\2605X<N\223\225:"
 #"8~\31\247\333\17\263f`s\263\274\266d%?\256\357X\335\212]\204\201\315"
 #"\252\307\3434Y\311\213\343\227\361\272\26"
 #"\273\b\3\233M\317\307i\262\222\17\307"
 #"/st/v\21\0066\213\21\327\220\254\344\301u\234gH\261\2130\260\321\215"
 #"|\234&+\361q\3742\327\260b\27a`\243\232\3618MV\342\342\370e\276"
 #"\241\305.\302\300F3sH\311J<"
 #"\224\272\17\303\213]\204\201\215\302\3035"
 #"\"+qp\235\374\230R\354\"\f\254"
 #"w\236\316H\311\212\177\236\362\202\211\305"
 #".\302\300z\345\361q\232\254\370\3451"
 #"/\325M-v\21\6\326\e\317\327\202\254\370\303\365\360iz\261\2130\260^D"
 #"x\234&+~D\310KU.\212]\204\201\235-\322\3434Y\231/R^*"
 #"rS\354\"\f\354,\21\327\234\254\314"
 #"\303\272\373\247\376\231\247\275\355\a\226\35"
 #"A\177\221w^de\274\310y\251\304"
 #"\325\216}\263\235\333\2613\350+\303\220"
 #"\222\225q2\344\245\n\227\305\276a`"
 #"\321\212\254\364E\251\307\342\272\330E\30"
 #"\330^2\256)Y\351\2035\215\307}"
 #"\261\2130\260\3262\277M\215\254\330\312"
 #"\234\225\314B\24\273\b\3k\245\302#5Y\261Q!+Y\205)v\21\6\366"
 #"\253JkGV\276a\355b\vU\354\"\f\354[\25\37\251\311\312;\25\263\222"
 #"M\270b\27a`\265*?R\223\25\235\312Y\311$d\261\2130\260\255X#"
 #"\262\322\2125\312#l\261\2130\260Ox\244\376\203\254"
 #"\334#+\271\204.v\21\6\366\n\217\324\177#+\347\310"
) 500
(
 #"J>\341\213]\204\201=bP\257\221\225\237\310JN)\212]\204\201\335\260\6"
 #"\317\310\312o\254A^i\212]\204\201"
 #"\345\234\264\35Y!+\231\245*v\221\272\3\313#\265\36YAV\351\212]\244"
 #"\336\300V\372\\\255\221\25d\224\262\330"
 #"E\352\f,\217\324\337\221\25d\223\266\330E\362\17,\217\324v\310\n2I]"
 #"\354\"y\a6\343\3474\eYA\26\351\213]$\337\300\362H\335\17YA\6"
 #"%\212]$\317\300\362H\335\37YAte\212]$\376\3002\250\343\220\25D"
 #"V\252\330E\342\16l\304\327\34\35YAT\345\212]$\336\300rN:\17Y"
 #"AD%\213]$\316\300\362H=\37YA4e\213]\304\377\300z~m\325"
 #"\220\25DR\272\330E\374\16,\217\324"
 #"\376\220\25DQ\276\330E\374\r,\217\324~\221\25D\360k\366\v\360b\e\330"
 #"\257C\3222\364w\377\rO\245\201sd\0053=]\367u]\27\212}\307b"
 #"`\367;\272\343\307y\272 \354\276\342"
 #"\260\312\212\310\237\\\354?\26Y\301\231"
 #"}.\356\362\302Q\314A\317G\355\247"
 #"\335\27\203\32\313\210\254\234}|\262R"
 #"\323U\251\237\3753\305~\301r`\331"
 #"}\345\325\243\334\257\236\370\266?#+"
 #"\265]]\377\375\357S\354'\356vK"
 #"\32\313\262\254\307\217\241=\236\201\177\226"
 #"\345~\227\27\262\202'[^(\366\v"
 #"\26\345\376\264\263\342mjyX\224\373"
 #"\335\277OV\240A\261\337\350Q\356\333"
 #"\307\342\221:\237\257\345~U\334d\5W\266S\201\343/\212\375A\317rG>"
 #"\26;w\216_p\347\370E\324\343\206`]\327\205bo`y\346\276}<v"
 #"`yY\235\271s\374\202=\315\3674,\353\312\206\240U\353{H\2370\2505"
 #"\334\275=\355\370\347{V\337\0\205\234\370\6\245A"
 #"\356\276)i\363\364\347\250\347)+\300\231\226\16\341"
) 167
(
 #"(\346%\315\360\361H\215\326\274\220\25"
 #"X\240\330\25\356\6\356n\367\305\220\326"
 #"\244-h\262\2+\234\261\e\341\250\5"
 #"\32\344\5\255\336d\205b\377\350\356\v`\243_\v\374#/h\365%+\34\305"
 #"t\302\27\300\240\375:L\317\327\2\337"
 #"\254\263\302\216\375\203\226\267\0351\260\0"
 #"\254=\355\332y\273cg<b\327\305"
 #"\3677\240\225\365\6\220b\377\200\359"
 #"\236\360\327I\240\225eV8c\357\204\335\0274\31 /\265Yg\205b\377\350"
 #"l\221\31R\\!/h\365%+\377\2\206\224\207"
 #"\366o\"\331S\0\0\0\0IEND\256B`\202"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; template to use : is one of and self and mutual recursion"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; as the result could be either a listOfNodes or #f"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; graph is a list, that is structurally recursive"
0 0 24 29 1 #"\n"
0 0 17 3 120
(
 #";; each neighbors of the origin itself will become an origin, for wh"
 #"ich a route will be searched, hence mutual recursion"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"find-route"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       (("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"some-route"
0 0 24 3 2 #" ("
0 0 14 3 19 #"find-route-in-ngbrs"
0 0 24 3 2 #" ("
0 0 14 3 9 #"neighbors"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #") "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 10 #"some-route"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 10 #"some-route"
0 0 24 3 7 #")]))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; find-route-in-ngbr : [listOf Nodes] node graph"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; parses the list of nodes to look for Nodes that have"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; - a route to the end node, using find-route"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; else returns empty"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; - mutual recursion"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 1 #"f"
0 0 17 3 19 #"ind-route-in-ngbrs "
0 0 17 3 4 #"nbrs"
0 0 17 3 26 #" end g) #f)         ; stub"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 19 #"find-route-in-ngbrs"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 14 3 1 #"G"
0 0 24 3 1 #" "
0 0 14 3 5 #"Graph"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #") "
0 0 17 3 23 #"; terminating condition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 19 #"find-route-in-ngbrs"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"E"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 5 #"Graph"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"B"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 19 #"find-route-in-ngbrs"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"E"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"F"
0 0 24 3 1 #" "
0 0 14 3 5 #"Graph"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 1 #"F"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; template used : is one of , structural and mutual trecursion"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"find-route-in-ngbrs"
0 0 24 3 1 #" "
0 0 14 3 4 #"nbrs"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"nbrs"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       (("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-route"
0 0 24 3 2 #" ("
0 0 14 3 10 #"find-route"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"nbrs"
0 0 24 3 2 #") "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-route"
0 0 24 3 3 #") ("
0 0 14 3 19 #"find-route-in-ngbrs"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"nbrs"
0 0 24 3 2 #") "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 7 #"a-route"
0 0 24 3 11 #"]))]))     "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 8 #"Exercise"
0 0 17 3 1 #" "
0 0 17 3 6 #"28.1.3"
0 0 17 3 1 #" "
0 0 17 3 4 #"Test"
0 0 17 3 1 #" "
0 0 17 3 11 #"find-route."
0 0 17 3 1 #" "
0 0 17 3 3 #"Use"
0 0 17 3 1 #" "
0 0 17 3 2 #"it"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 4 #"find"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 5 #"route"
0 0 17 3 1 #" "
0 0 17 3 4 #"from"
0 0 17 3 1 #" "
0 0 17 3 1 #"A"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 1 #"G"
0 0 17 3 1 #" "
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 20 #" graph of figure 76."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 6 #"Ensure"
0 0 17 3 1 #" "
0 0 17 3 4 #"that"
0 0 17 3 1 #" "
0 0 17 3 2 #"it"
0 0 17 3 1 #" "
0 0 17 3 8 #"produces"
0 0 17 3 1 #" "
0 0 17 3 5 #"false"
0 0 17 3 1 #" "
0 0 17 3 4 #"when"
0 0 17 3 1 #" "
0 0 17 3 5 #"asked"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 25 #" find a route from C to G"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 8 #"Exercise"
0 0 17 3 1 #" "
0 0 17 3 6 #"28.1.4"
0 0 17 3 1 #" "
0 0 17 3 7 #"Develop"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 8 #"function"
0 0 17 3 19 #" test-on-all-nodes,"
0 0 17 3 1 #" "
0 0 17 3 5 #"which"
0 0 17 3 1 #" "
0 0 17 3 8 #"consumes"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 5 #"graph"
0 0 17 3 1 #" "
0 0 17 3 1 #"g"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 6 #" tests"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 10 #"find-route"
0 0 17 3 1 #" "
0 0 17 3 2 #"on"
0 0 17 3 1 #" "
0 0 17 3 3 #"all"
0 0 17 3 1 #" "
0 0 17 3 5 #"pairs"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 5 #"nodes"
0 0 17 3 1 #" "
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 2 #"g."
0 0 17 3 1 #" "
0 0 17 3 4 #"Test"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 8 #"function"
0 0 17 3 1 #" "
0 0 17 3 2 #"on"
0 0 17 3 6 #" Graph"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; test-on-all-nodes: graph -> [listOfNodes] or #f"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; given a graph, it tests all the routes between the pairs of nodes"
0           0
